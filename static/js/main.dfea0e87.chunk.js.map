{"version":3,"sources":["textures/ground.jpg","textures/heightMap.png","Scene.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","onSceneReady","scene","camera","ArcRotateCamera","Vector3","Zero","lowerBetaLimit","upperBetaLimit","Math","PI","lowerRadiusLimit","upperRadiusLimit","canvas","getEngine","getRenderingCanvas","attachControl","light","DirectionalLight","position","intensity","light2","SpotLight","HemisphericLight","ground","Mesh","CreateGroundFromHeightMap","heightMap","groundMaterial","StandardMaterial","diffuseTexture","Texture","groundTexture","scale","specularColor","Color3","y","material","shadowGenerator","ShadowGenerator","useExponentialShadowMap","ship","shadowGenerator2","usePoissonSampling","receiveShadows","SceneLoader","ImportMesh","newMeshes","particleSystems","stopAnimation","addShadowCaster","shipMat","diffuseColor","alpha","shipAlt","shipX","shipZ","registerBeforeRender","rotation","cos","sin","onKeyboardObservable","add","kbInfo","type","KeyboardEventTypes","KEYDOWN","event","key","KEYUP","onRender","Container","styled","div","id","antialias","Header","header","App","Scene","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dfea0e87.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ground.acda6c83.jpg\";","module.exports = __webpack_public_path__ + \"static/media/heightMap.3cd330cc.png\";","import React from 'react'\nimport styled from 'styled-components'\n\nimport {\n    Vector3,\n    Scene,\n    Mesh,\n    ArcRotateCamera,\n    DirectionalLight,\n    StandardMaterial,\n    Color3,\n    SpotLight,\n    Texture,\n    ShadowGenerator,\n    KeyboardEventTypes,\n    SceneLoader,\n    AbstractMesh,\n    HemisphericLight\n    } from '@babylonjs/core'\nimport SceneComponent from 'babylonjs-hook'\nimport '@babylonjs/loaders'\nimport '@babylonjs/core/Misc/tga'\nimport groundTexture from './textures/ground.jpg'\nimport heightMap from './textures/heightMap.png'\n\nlet box: Mesh\n\nconst onSceneReady = (scene: Scene) => {\n  // Setup environment\n  const camera = new ArcRotateCamera(\"Camera\", 0, 0.8, 90, Vector3.Zero(), scene);\n  camera.lowerBetaLimit = 0.1;\n  camera.upperBetaLimit = (Math.PI / 2) * 0.9;\n  camera.lowerRadiusLimit = 30;\n  camera.upperRadiusLimit = 150;\n  const canvas = scene.getEngine().getRenderingCanvas();\n  if (!canvas) return\n  camera.attachControl(canvas, true);\n        \n  // light1\n  const light = new DirectionalLight(\"dir01\", new Vector3(-1, -2, -1), scene);\n  light.position = new Vector3(20, 40, 20);\n  light.intensity = 0.8;\n\n  // var lightSphere = Mesh.CreateSphere(\"sphere\", 10, 2, scene);\n  // lightSphere.position = light.position;\n  // lightSphere.material = new StandardMaterial(\"light\", scene);\n  // lightSphere.material.emissiveColor = new Color3(1, 1, 0);\n        \n  // light2\n  const light2 = new SpotLight(\"spot02\", new Vector3(30, 40, 20),\n  new Vector3(-1, -2, -1), 1.1, 16, scene);\n  light2.intensity = 0.5;\n        \n  // const lightSphere2 = Mesh.CreateSphere(\"sphere\", 10, 2, scene);\n  // lightSphere2.position = light2.position;\n  // lightSphere2.material = new StandardMaterial(\"light\", scene);\n  // lightSphere2.material.emissiveColor = new Color3(1, 1, 0);\n\n  var hemisphericLight = new HemisphericLight(\"hemi\", new Vector3(0, 0.5, 0), scene);\n        \n  // Ground\n  var ground = Mesh.CreateGroundFromHeightMap(\"ground\", heightMap, 200, 200, 100, 0, 10, scene, false);\n  var groundMaterial = new StandardMaterial(\"ground\", scene);\n  groundMaterial.diffuseTexture = new Texture(groundTexture, scene);\n  groundMaterial.diffuseTexture.scale(6);\n  // groundMaterial.diffuseTexture.uScale = 6;\n  // groundMaterial.diffuseTexture.vScale = 6;\n  groundMaterial.specularColor = new Color3(0, 0, 0);\n  ground.position.y = -2.05;\n  ground.material = groundMaterial;\n //lava\n //groundMaterial.specularColor = new Color3(1500, 100, 0);\n //water\n //groundMaterial.specularColor = new Color3(0, 500, 1000);\n  // Shadows\n  var shadowGenerator = new ShadowGenerator(1024, light);\n  shadowGenerator.useExponentialShadowMap = true;\n  var shadowGenerator2 = new ShadowGenerator(1024, light2);\n  shadowGenerator2.usePoissonSampling = true;\n  ground.receiveShadows = true;\n        \n  // Torus\n   //var torus = Mesh.CreateTorus(\"torus\", 4, 2, 30, scene, false);\n   //torusMat.diffuseColor = new Color3(0.8,0.7,0)\n   //torusMat.diffuseColor = new Color3(0.8,0.7,0)\n   //torus.material = torusMat;\n\n   //get spaceship\n   let ship: AbstractMesh;\n   SceneLoader.ImportMesh(\n     '',\n     '/models/',\n     'SciFi_Fighter.obj', \n     scene, \n     function (newMeshes, particleSystems) {\n       ship = newMeshes[0];\n       // torus.position = new Vector3(6, 0, 0);\n       // ship.scaling = new Vector3(0.15, 0.5, 0.2);\n       //ship.rotation.y = Math.PI;\n       //ship.rotation.z = -Math.PI / 7 * 3;\n       //ship.rotation.x = Math.PI;\n       scene.stopAnimation(ship);\n       shadowGenerator.addShadowCaster(ship);\n       shadowGenerator2.addShadowCaster(ship);\n        var shipMat = new StandardMaterial(\"shipMat\", scene);\n       ship.material = shipMat;\n       shipMat.diffuseColor = new Color3(0.4,0.4,0.4)\n       //red\n       //shipMat.diffuseColor = Color3.Red()\n       //oranje\n       //shipMat.diffuseColor = new Color3(0.6,0.2,0)\n       //yellow\n       //shipMat.diffuseColor = Color3.Yellow()\n       //green\n       //shipMat.diffuseColor = Color3.Green()\n       //dark green\n       //shipMat.diffuseColor = new Color3(0,0.2,0)\n       //blue\n       //shipMat.diffuseColor = new Color3(0,0.5,1)\n       //dark blue\n       // shipMat.diffuseColor = Color3.Blue()\n       //purple\n       //shipMat.diffuseColor = Color3.Purple()\n       //pink\n       //shipMat.diffuseColor = new Color3(1,0.1,0.5)\n       //withe\n       //shipMat.diffuseColor = new Color3(1,1,1)\n       //black\n       //shipMat.diffuseColor = new Color3(0,0,0)\n       //dark gray\n       //shipMat.diffuseColor = new Color3(0.3,0.3,0.3)\n     }\n   );\n    \n    \n  // Box\n  //var box = Mesh.CreateBox(\"box\", 3);\n  //box.parent = torus;\t\n // const boxMat = new StandardMaterial(\"box_mat\", scene);\n  //boxMat.diffuseColor = Color3.Red();\n  //box.material = boxMat;\n  \n\n  // Animations\n  let alpha = 0;\n  let shipAlt = 25;\n  let shipX = 30;\n  let shipZ = 0;\n  scene.registerBeforeRender(function () {\n    if (ship) {\n       ship.rotation.y = alpha + 3 * Math.PI / 2;\n       // ship.rotation.z += 0.02;\n       shipX = shipX - Math.cos(alpha);\n       shipZ = shipZ + Math.sin(alpha);\n       const maxL = 65;\n       if (shipX > maxL) shipX = maxL;\n       if (shipX < -maxL) shipX = -maxL;\n       if (shipZ > maxL) shipZ = maxL;\n       if (shipZ < -maxL) shipZ = -maxL;\n       ship.position = new Vector3(shipX, shipAlt, shipZ)\n       \n      }\n    //alpha += 0.02;\n  });\n\n  scene.onKeyboardObservable.add((kbInfo) => {\n    switch (kbInfo.type) {\n        case KeyboardEventTypes.KEYDOWN:\n            if (kbInfo.event.key === 'q') shipAlt += 0.5;\n            if (kbInfo.event.key === 'a') shipAlt -= 0.5;\n            if (kbInfo.event.key === 's') alpha += 0.1;\n            if (kbInfo.event.key === 'd') alpha -= 0.1;\n\n            // console.log(`KEY DOWN: ${kbInfo.event.key} alt: ${torusAlt}`);\n            break;\n        case KeyboardEventTypes.KEYUP:\n            // console.log(\"KEY UP: \", kbInfo.event.keyCode);\n            break;\n    }\n});\n\n\n}\n\n/**\n * Will run on every frame render.  We are spinning the box on y-axis.\n */\nconst onRender = (scene: Scene) => {\n  if (box !== undefined) {\n    var deltaTimeInMillis = scene.getEngine().getDeltaTime();\n\n    const rpm = 10;\n    box.rotation.y += ((rpm / 60) * Math.PI * 2 * (deltaTimeInMillis / 1000));\n  }\n}\n\nconst Container = styled.div`\n  canvas {\n      width: 1000px;\n  }\n`\n\nexport default () => (\n    <Container>\n      <SceneComponent\n        id='my-canvas'\n        antialias\n        onSceneReady={onSceneReady}\n        onRender={onRender}\n      />\n    </Container>\n)\n","import React from 'react';\nimport styled from 'styled-components';\nimport Scene from './Scene';\n\nconst Header = styled.header`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`\n\nfunction App() {\n  return (\n    <div>\n      <Header>\n        <Scene />\n      </Header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}